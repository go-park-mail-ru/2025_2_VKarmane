// Code generated by mockery v2.53.5. DO NOT EDIT.

package auth

import (
	models "github.com/go-park-mail-ru/2025_2_VKarmane/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: user
func (_m *MockUserRepository) CreateUser(user models.User) (models.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user models.User
func (_e *MockUserRepository_Expecter) CreateUser(user interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(user models.User)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(_a0 models.User, _a1 error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(models.User) (models.User, error)) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: id
func (_m *MockUserRepository) GetUserByID(id int) (models.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserRepository_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - id int
func (_e *MockUserRepository_Expecter) GetUserByID(id interface{}) *MockUserRepository_GetUserByID_Call {
	return &MockUserRepository_GetUserByID_Call{Call: _e.mock.On("GetUserByID", id)}
}

func (_c *MockUserRepository_GetUserByID_Call) Run(run func(id int)) *MockUserRepository_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByID_Call) Return(_a0 models.User, _a1 error) *MockUserRepository_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserByID_Call) RunAndReturn(run func(int) (models.User, error)) *MockUserRepository_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByLogin provides a mock function with given fields: login
func (_m *MockUserRepository) GetUserByLogin(login string) (models.User, error) {
	ret := _m.Called(login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(login)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUserByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLogin'
type MockUserRepository_GetUserByLogin_Call struct {
	*mock.Call
}

// GetUserByLogin is a helper method to define mock.On call
//   - login string
func (_e *MockUserRepository_Expecter) GetUserByLogin(login interface{}) *MockUserRepository_GetUserByLogin_Call {
	return &MockUserRepository_GetUserByLogin_Call{Call: _e.mock.On("GetUserByLogin", login)}
}

func (_c *MockUserRepository_GetUserByLogin_Call) Run(run func(login string)) *MockUserRepository_GetUserByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByLogin_Call) Return(_a0 models.User, _a1 error) *MockUserRepository_GetUserByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserByLogin_Call) RunAndReturn(run func(string) (models.User, error)) *MockUserRepository_GetUserByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
