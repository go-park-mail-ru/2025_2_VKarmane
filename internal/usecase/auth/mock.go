// Code generated by mockery v2.53.5. DO NOT EDIT.

package auth

import (
	models "github.com/go-park-mail-ru/2025_2_VKarmane/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// GetUserByID provides a mock function with given fields: userID
func (_m *MockAuthService) GetUserByID(userID int) (models.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (models.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) models.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockAuthService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - userID int
func (_e *MockAuthService_Expecter) GetUserByID(userID interface{}) *MockAuthService_GetUserByID_Call {
	return &MockAuthService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", userID)}
}

func (_c *MockAuthService_GetUserByID_Call) Run(run func(userID int)) *MockAuthService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockAuthService_GetUserByID_Call) Return(_a0 models.User, _a1 error) *MockAuthService_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_GetUserByID_Call) RunAndReturn(run func(int) (models.User, error)) *MockAuthService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: req
func (_m *MockAuthService) Login(req models.LoginRequest) (models.AuthResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 models.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(models.LoginRequest) (models.AuthResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.LoginRequest) models.AuthResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(models.AuthResponse)
	}

	if rf, ok := ret.Get(1).(func(models.LoginRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - req models.LoginRequest
func (_e *MockAuthService_Expecter) Login(req interface{}) *MockAuthService_Login_Call {
	return &MockAuthService_Login_Call{Call: _e.mock.On("Login", req)}
}

func (_c *MockAuthService_Login_Call) Run(run func(req models.LoginRequest)) *MockAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.LoginRequest))
	})
	return _c
}

func (_c *MockAuthService_Login_Call) Return(_a0 models.AuthResponse, _a1 error) *MockAuthService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_Login_Call) RunAndReturn(run func(models.LoginRequest) (models.AuthResponse, error)) *MockAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: req
func (_m *MockAuthService) Register(req models.RegisterRequest) (models.AuthResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 models.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(models.RegisterRequest) (models.AuthResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(models.RegisterRequest) models.AuthResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(models.AuthResponse)
	}

	if rf, ok := ret.Get(1).(func(models.RegisterRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - req models.RegisterRequest
func (_e *MockAuthService_Expecter) Register(req interface{}) *MockAuthService_Register_Call {
	return &MockAuthService_Register_Call{Call: _e.mock.On("Register", req)}
}

func (_c *MockAuthService_Register_Call) Run(run func(req models.RegisterRequest)) *MockAuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.RegisterRequest))
	})
	return _c
}

func (_c *MockAuthService_Register_Call) Return(_a0 models.AuthResponse, _a1 error) *MockAuthService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_Register_Call) RunAndReturn(run func(models.RegisterRequest) (models.AuthResponse, error)) *MockAuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
