// Code generated by mockery v2.53.5. DO NOT EDIT.

package budget

import (
	models "github.com/go-park-mail-ru/2025_2_VKarmane/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockBudgetService is an autogenerated mock type for the BudgetService type
type MockBudgetService struct {
	mock.Mock
}

type MockBudgetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBudgetService) EXPECT() *MockBudgetService_Expecter {
	return &MockBudgetService_Expecter{mock: &_m.Mock}
}

// GetBudgetsForUser provides a mock function with given fields: userID
func (_m *MockBudgetService) GetBudgetsForUser(userID int) ([]models.Budget, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBudgetsForUser")
	}

	var r0 []models.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]models.Budget, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []models.Budget); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBudgetService_GetBudgetsForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBudgetsForUser'
type MockBudgetService_GetBudgetsForUser_Call struct {
	*mock.Call
}

// GetBudgetsForUser is a helper method to define mock.On call
//   - userID int
func (_e *MockBudgetService_Expecter) GetBudgetsForUser(userID interface{}) *MockBudgetService_GetBudgetsForUser_Call {
	return &MockBudgetService_GetBudgetsForUser_Call{Call: _e.mock.On("GetBudgetsForUser", userID)}
}

func (_c *MockBudgetService_GetBudgetsForUser_Call) Run(run func(userID int)) *MockBudgetService_GetBudgetsForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockBudgetService_GetBudgetsForUser_Call) Return(_a0 []models.Budget, _a1 error) *MockBudgetService_GetBudgetsForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBudgetService_GetBudgetsForUser_Call) RunAndReturn(run func(int) ([]models.Budget, error)) *MockBudgetService_GetBudgetsForUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBudgetService creates a new instance of MockBudgetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBudgetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBudgetService {
	mock := &MockBudgetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
