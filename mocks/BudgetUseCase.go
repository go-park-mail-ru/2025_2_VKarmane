// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/go-park-mail-ru/2025_2_VKarmane/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// BudgetUseCase is an autogenerated mock type for the BudgetUseCase type
type BudgetUseCase struct {
	mock.Mock
}

// GetBudgetByID provides a mock function with given fields: ctx, userID, budgetID
func (_m *BudgetUseCase) GetBudgetByID(ctx context.Context, userID int, budgetID int) (models.Budget, error) {
	ret := _m.Called(ctx, userID, budgetID)

	if len(ret) == 0 {
		panic("no return value specified for GetBudgetByID")
	}

	var r0 models.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (models.Budget, error)); ok {
		return rf(ctx, userID, budgetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) models.Budget); ok {
		r0 = rf(ctx, userID, budgetID)
	} else {
		r0 = ret.Get(0).(models.Budget)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userID, budgetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBudgetsForUser provides a mock function with given fields: ctx, userID
func (_m *BudgetUseCase) GetBudgetsForUser(ctx context.Context, userID int) ([]models.Budget, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBudgetsForUser")
	}

	var r0 []models.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Budget, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Budget); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBudgetUseCase creates a new instance of BudgetUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBudgetUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *BudgetUseCase {
	mock := &BudgetUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
